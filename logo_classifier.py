# -*- coding: utf-8 -*-
"""Clasificador de logos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mVUzFGc2Bh4NlZDkOVFegYuMBYjKNGCG

# Clasificador de logos de marcas comerciales

Se ha propuesto el desarrollo de una red que catalogue logos y e indique que tipo de logo es (compras, transportes, personajes animados...). Para ello, se va a utilizar un dataset contenido en nuestra cuenta de Google Drive.
"""

from google.colab import drive
drive.mount('/content/drive')

import tensorflow as tf
tf.test.gpu_device_name()

"""Cargamos una imagen como ejemplo de nuestro dataset, para comprobar que todo esta correcto."""

# Commented out IPython magic to ensure Python compatibility.
!ls "/content/drive/My Drive/Colab Notebooks/datasets/"

from matplotlib.pyplot import imshow
import numpy as np
from PIL import Image

# %matplotlib inline
pil_im = Image.open('/content/drive/My Drive/Colab Notebooks/datasets/Logos/Addidas/1.jpg', 'r')
imshow(np.asarray(pil_im))

"""## Data source utilizado en ambas redes neuronales"""

# DATA SOURCE --------------------------------------------------

image_size = (150, 150)
batch_size = 32

train_ds = tf.keras.preprocessing.image_dataset_from_directory(
    "/content/drive/My Drive/Colab Notebooks/datasets/Logos",
    validation_split=0.2,
    subset="training",
    seed=1234,
    image_size=image_size,
    batch_size=batch_size,
    label_mode='categorical'
)
val_ds = tf.keras.preprocessing.image_dataset_from_directory(
    "/content/drive/My Drive/Colab Notebooks/datasets/Logos",
    validation_split=0.2,
    subset="validation",
    seed=1234,
    image_size=image_size,
    batch_size=batch_size,
    label_mode='categorical'
)

train_ds = train_ds.prefetch(buffer_size=32)
val_ds = val_ds.prefetch(buffer_size=32)

"""##Implementación de red neuronal desarrollada

Tras numerosas pruebas se ha decidido establecer la siguiente configuracion de capas neuronales.
"""

# MODEL --------------------------------------------------

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dropout, Dense, Rescaling, Flatten
from tensorflow.keras.callbacks import EarlyStopping

model = keras.Sequential()
model.add(Rescaling(scale=(1./127.5),
                    offset=-1, 
                    input_shape=(150, 150, 3)))

model.add(Conv2D(8, kernel_size=(3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(8, kernel_size=(3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(32, kernel_size=(3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.5))
model.add(Conv2D(128, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.5))

model.add(Flatten())
model.add(Dense(32, activation='sigmoid'))
model.add(Dropout(0.25))
model.add(Dense(15, activation='softmax'))

model.compile(loss=tf.keras.losses.categorical_crossentropy,
              optimizer=tf.keras.optimizers.Adam(1e-3),
              metrics=['accuracy'])

"""##Entrenamiento de red neuronal desarrollada"""

# TRAINING --------------------------------------------------

epochs = 200

es = EarlyStopping(monitor='val_accuracy', mode='max', verbose=1, patience=100, restore_best_weights=True)

h = model.fit(
        train_ds,
        epochs=epochs, 
        validation_data=val_ds,
        callbacks = [es]
)

"""##Implementación del modelo  VGG16
Modelo incluido en keras utilizado para comparar el rendimiento de la red neuronal desarrollada.
"""

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.applications.vgg16 import VGG16
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.vgg16 import preprocess_input, decode_predictions
import numpy as np

base_model = keras.applications.VGG16(
    weights='imagenet',  # Carga los pesos ya entrenados en ImageNet.
    input_shape=(150, 150, 3),
    include_top=False)  # No incluir el clasificador ImageNet en la zona superior.

base_model.trainable = False

inputs = keras.Input(shape=(150, 150, 3))

x = base_model(inputs, training=False)

x = keras.layers.GlobalAveragePooling2D()(x)

x = keras.layers.Dense(256, activation='relu')(x)
outputs = keras.layers.Dense(15, activation='softmax')(x)

modelVGG16 = keras.Model(inputs, outputs)

"""##Entrenamiento del modelo VGG16"""

modelVGG16.compile(loss=tf.keras.losses.categorical_crossentropy,
              optimizer=tf.keras.optimizers.Adam(1e-3),
              metrics=['accuracy'])

epochs = 200

es = EarlyStopping(monitor='val_accuracy', mode='max', verbose=1, patience=100, restore_best_weights=True)

h2 = modelVGG16.fit(
        train_ds,
        epochs=epochs, 
        validation_data=val_ds,
        callbacks = [es]
)

"""##Graficas con resultados de red neuronal desarrollada"""

import matplotlib.pyplot as plt

plt.plot(h.history['accuracy'])
plt.plot(h.history['val_accuracy'])
plt.plot(h.history['loss'])
plt.title('Model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['training', 'validation','loss'], loc='upper right')
plt.show()

"""##Grafica con resultados del modelo VGG16"""

import matplotlib.pyplot as plt

plt.plot(h2.history['accuracy'])
plt.plot(h2.history['val_accuracy'])
plt.plot(h2.history['loss'])
plt.title('Model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['training', 'validation','loss'], loc='upper right')
plt.show()

"""## Evaluación de los resultados red neuronal desarrollada"""

import numpy as np
from sklearn.metrics import classification_report, confusion_matrix
import seaborn as sns

results = np.concatenate([(y, model.predict(x=x)) for x, y in val_ds], axis=1)

predictions = np.argmax(results[0], axis=1)
labels = np.argmax(results[1], axis=1)

cf_matrix = confusion_matrix(labels, predictions)

sns.heatmap(cf_matrix, annot=True, fmt="d", cmap="Blues")

print(classification_report(labels, predictions, digits = 4))

"""## Evaluación de los resultados del modelo VGG16"""

import numpy as np
from sklearn.metrics import classification_report, confusion_matrix
import seaborn as sns

results = np.concatenate([(y, modelVGG16.predict(x=x)) for x, y in val_ds], axis=1)

predictions = np.argmax(results[0], axis=1)
labels = np.argmax(results[1], axis=1)

cf_matrix = confusion_matrix(labels, predictions)

sns.heatmap(cf_matrix, annot=True, fmt="d", cmap="Blues")

print(classification_report(labels, predictions, digits = 4))

"""#Validación de resultados
Una vez entrenadas ambas redes neuronales se utiliza una foto de un logo que no fue incluida en las muestras de entrenamiento/prueba.
"""

img = keras.preprocessing.image.load_img(
    '/content/drive/My Drive/Colab Notebooks/datasets/test/spiderman.jpg', target_size=image_size #Para comprobar manaualmente una foto.
)
img_array = keras.preprocessing.image.img_to_array(img)
img_array = tf.expand_dims(img_array, 0)  # Create batch axis

predictions = model.predict(img_array)
predictionsVGG16 = modelVGG16.predict(img_array)

"""
La siguiente porción de codigo se encarga de asociar la marca del logo comercial a la categoria correspondiente."""

predict = np.argmax(predictions[0])

categoria= ''

Cartoons=[2,10,12]
Clothes=[0,11,13]
Food=[4,6,9]
IT=[1,5,7]
Transportation=[3,8,14]

if predict in Cartoons:
  categoria = categoria + 'Cartoons'
if predict in Clothes:
  categoria = categoria + 'Clothes'
if predict in Food:
  categoria = categoria + 'Food'
if predict in IT:
  categoria = categoria + 'IT'
if predict in Transportation:
    categoria = categoria + 'Transportation'

predictVGG16 = np.argmax(predictionsVGG16[0])
categoriaVGG16= ''


if predictVGG16 in Cartoons:
  categoriaVGG16 = categoriaVGG16 + 'Cartoons'
if predictVGG16 in Clothes:
  categoriaVGG16 = categoriaVGG16 + 'Clothes'
if predictVGG16 in Food:
  categoriaVGG16 = categoriaVGG16 + 'Food'
if predictVGG16 in IT:
  categoriaVGG16 = categoriaVGG16 + 'IT'
if predictVGG16 in Transportation:
    categoriaVGG16 = categoriaVGG16 + 'Transportation'

"""# Resultados de red neuronal desarrollada"""

acierto= round(max(h.history['val_accuracy']),4)

print("- La imagen pertecene a la categoria:")
print(categoria+ '\n' )

print("- La imagen pertenece a la subcategoria: ") 
!ls "/content/drive/My Drive/Colab Notebooks/datasets/Logos" | awk 'NR=='$predict+1

print("\nTasa de acierto máxima de red neuronal:", acierto)

"""# Resultados del modelo VGG16"""

acierto= round(max(h2.history['val_accuracy']),4)

print("- La imagen pertecene a la categoria:")
print(categoriaVGG16+ '\n' )

print("- La imagen pertenece a la subcategoria: ") 
!ls "/content/drive/My Drive/Colab Notebooks/datasets/Logos" | awk 'NR=='$predictVGG16+1

print("\nTasa de acierto máxima de red neuronal:", acierto)
